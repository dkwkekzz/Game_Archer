
//글자 수(t)를 기준으로 나뉘어진 그룹(group)을 이용하여 정렬할 comparator입니다.
struct Comparator{
	//group[i] = i번째 원소(S[i~])가 속한 그룹의 번호
	const vector<int>& group;
	int t;
	Comparator(const vector<int>& _group, int _t) : group(_group), t(_t){}
	bool operator()(int a, int b){
		//이미 그룹이 나뉘어져 있다면(구분된다면) 그대로 반환하며
		if (group[a] != group[b]) return group[a] < group[b];
		//그렇지 않다면 글자 수만큼 띄어서 비교합니다.
		//t만큼 더하면 t만큼 띄어있는 글자를 비교할 수 있습니다. 
		return group[a + t] < group[b + t];
		//여기서 group[n] = -1로 함으로써 배열에 벗어나지 않을 수 있습니다.
	}
};

vector<int> getSuffixArray(const string& s){
	int n = s.size();
	int t = 1;
	vector<int> group(n + 1);
	//t=1일때는 첫 글자로 비교해도 같은 효과가 있다.(글자가 같으면 같은 그룹)
	for (int i = 0; i < n; i++) group[i] = s[i];
	//비교하면서 배열을 벗어나지 않게 -1을 설정
	group[n] = -1;
	//결과적으로 접미사 배열로 반환될 값 perm
	vector<int> perm(n);
	for (int i = 0; i < n; i++) perm[i] = i;
	//현재 group은 첫 글자로 정렬되어 있는 상태
	while (t < n){
		//첫 2t글자로 perm을 다시 정렬한다.
		Comparator compareUsing2T(group, t);
		sort(perm.begin(), perm.end(), compareUsing2T);
		t *= 2;
		//2t가 n을 넘어가면 접미사 배열 완성
		if (t >= n) break;
		//앞서 정렬한 perm을 이용하여 그룹 정보를 갱신한다.
		vector<int> newGroup(n + 1);
		newGroup[n] = -1;
		newGroup[perm[0]] = 0;
		for (int i = 0; i < n; i++){
			//처음부터 비교하면서 같다면 같은 인덱스, 다르다면 다음 인덱스에 저장
			if (compareUsing2T(perm[i - 1], perm[i]))
				newGroup[perm[i]] = newGroup[perm[i]] + 1;
			else
				newGroup[perm[i]] = newGroup[perm[i - 1]];
		}
		group = newGroup;
	}
	return perm;
}
