vector<int> getPartialMatch(const string& N);
vector<int> kmpSearch(const string& H, const string& N){
	int h = H.size(), n = N.size();
	vector<int> ret;
	vector<int> pi = getPartialMatch(N);
	int begin = 0, matched = 0;
	while (begin <= h - n){
		//일치한다면 찾는 문자열이 될때까지 matched를 증가시킨다.
		if (matched < n && H[begin + matched] == N[matched]){
			matched++;
			if (matched == n) ret.push_back(begin);
		}
		//일치하지 않는다면 다음 문자열을 검색한다.
		//전처리한 pi를 이용하여 다음 검색을 어디서 시작할지 결정한다.
		else{
			if (matched == 0) begin++;
			else{
				begin += matched - pi[matched - 1];
				matched = pi[matched - 1];
			}
		}
	}
	return ret;
}

//***N(접미사)과 begin만큼 떨어진 N(접두사)을 매칭시킨다.***

//접두사를 하나씩 떨어뜨리면서 각각의 접미사에 대응시킨다.
vector<int> getPartialNativeMatch(const string& N){
	int n = N.size();
	vector<int> pi(n, 0);
	for (int begin = 1; begin < n; begin++){
		for (int i = 0; i < n; i++){
			if (N[begin] != N[begin + i]) break;
			pi[begin + i] = max(pi[begin + i], i + 1);
		}
	}
	return pi;
}

//kmp알고리즘을 적용시킨다.
vector<int> getPartialMatch(const string& N){
	int n = N.size();
	vector<int> pi(n, 0);
	int begin = 1, matched = 0;
	while (begin + matched < n){
		//접두사와 접미사가 같다면 matched를 증가시킨다.
		//그리고 그 값을 pi에 저장한다.
		if (N[begin + matched] == N[matched]){
			matched++;
			pi[begin + matched - 1] = matched;
		}
		//필요없는 부분은 건너뛴다.
		//앞서 구한 matched를 통하여 같은 문자열이 나올 수 있는 지점을 찾을 수 있다.
		else{
			if (matched == 0) begin++;
			else{
				begin += matched - pi[matched - 1]; 
				matched = pi[matched - 1];
			}
		}
	}
	return pi;
}